// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String?
  dateFormat     String?         @default("DD/MM/YYYY")
  createdAt      DateTime        @default(now())
  password       String
  points         Int             @default(0)
  level          Int             @default(1)
  tasks          Task[]
  streak         Streak?
  userChallenges UserChallenge[]
  userBadges     UserBadge[]
  taskCounter    TaskCounter?
  taskDailyStats TaskDailyStat[]
  categories     Category[]
}

enum TASK_STATUS {
  TODO
  IN_PROGRESS
  DONE
}

enum TASK_IMPACT {
  HIGH_IMPACT_HIGH_EFFORT
  HIGH_IMPACT_LOW_EFFORT
  LOW_IMPACT_HIGH_EFFORT
  LOW_IMPACT_LOW_EFFORT
}

model Task {
  id               String          @id @default(uuid())
  emoji            String?
  title            String
  description      String?
  status           TASK_STATUS     @default(TODO)
  dueDate          DateTime
  createdAt        DateTime        @default(now())
  categoryId       String?
  userId           String
  impact           TASK_IMPACT
  relativeOrder    Int // order relative to other tasks in the same status
  firstCompletedAt DateTime?
  checklistItems   ChecklistItem[]
  statusHistory    StatusUpdate[]
  category         Category?       @relation(fields: [categoryId], references: [id])
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([firstCompletedAt])
}

model Category {
  id     String @id @default(uuid())
  name   String
  tasks  Task[]
  userId String
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChecklistItem {
  id        String  @id @default(uuid())
  title     String
  completed Boolean @default(false)
  order     Int
  taskId    String
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId]) // add index for taskId
}

model StatusUpdate {
  id        String      @id @default(uuid())
  status    TASK_STATUS
  updatedAt DateTime    @default(now())
  taskId    String
  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId]) // add index for taskId
}

// Check for completed tasks daily (or desired interval).
// If a task is completed, increment the currentStreak in the user's corresponding Streak record (create a new record if one doesn't exist).
// If a task isn't completed, reset the currentStreak to 0.
// Update the longestStreak if the currentStreak surpasses it.
model Streak {
  id        String   @id @default(uuid())
  startDate DateTime @default(now())
  updatedAt DateTime @default(now())
  current   Int      @default(0)
  longest   Int      @default(0)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Evaluate user actions against badge criteria.
// If criteria are met, create a record in the UserBadge table linking the user to the earned badge.
model Badge {
  code        String      @id @default(uuid())
  name        String
  description String
  icon        String?
  userBadges  UserBadge[]

  @@index([code])
}

model UserBadge {
  id       String   @id @default(uuid())
  earnedAt DateTime @default(now())
  userId   String
  badgeId  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge    Badge    @relation(fields: [badgeId], references: [code])

  @@unique([userId, badgeId])
}

model TaskCounter {
  id                  String   @id @default(uuid())
  userId              String   @unique
  // I need updatedAt to reset some of the counters daily
  updatedAt           DateTime @default(now())
  // (reset daily)
  // today's tasks 
  completedToday      Int      @default(0) // task master badge
  // (do not reset)
  completedAfterTenPm Int      @default(0) // night owl badge
  completedBeforeNoon Int      @default(0) // early bird badge
  completedOnWeekend  Int      @default(0) // weekend warrior badge
  completedTiny       Int      @default(0) // small wins matter badge
  categorized         Int      @default(0) // master organizer badge
  completed           Int      @default(0)
  total               Int      @default(0)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// this model is just to show the daily stats of a user in the My Journey page
model TaskDailyStat {
  id         String @id @default(uuid())
  date       String 
  created    Int    @default(0)
  completed  Int    @default(0)
  inProgress Int    @default(0)
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // combination of userId and date should be unique
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

enum CHALLENGE_TYPE {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

model Challenge {
  id             String          @id @default(uuid())
  title          String
  description    String
  type           CHALLENGE_TYPE
  startDate      DateTime        @default(now())
  endDate        DateTime
  criteria       Json
  userChallenges UserChallenge[]
}

model UserChallenge {
  id          String    @id @default(uuid())
  completed   Boolean   @default(false)
  progress    Int       @default(0)
  startDate   DateTime  @default(now())
  endDate     DateTime
  challengeId String
  userId      String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
