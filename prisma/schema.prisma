// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String?
  dateFormat     String?         @default("DD/MM/YYYY")
  createdAt      DateTime        @default(now())
  password       String
  points         Int             @default(0)
  level          Int             @default(1)
  tasks          Task[]
  streak         Streak?
  userChallenges UserChallenge[]
  userBadges     UserBadge[]

  @@unique([id, email], name: "unique_user")
}

enum TASK_STATUS {
  TODO
  IN_PROGRESS
  DONE
}

enum TASK_IMPACT {
  HIGH_IMPACT_HIGH_EFFORT
  HIGH_IMPACT_LOW_EFFORT
  LOW_IMPACT_HIGH_EFFORT
  LOW_IMPACT_LOW_EFFORT
}

model Task {
  id             String          @id @default(uuid())
  emoji          String?
  title          String
  description    String?
  status         TASK_STATUS     @default(TODO)
  dueDate        DateTime
  createdAt      DateTime        @default(now())
  categoryId     String?
  userId         String
  impactId       TASK_IMPACT
  impact         TaskImpact      @relation(fields: [impactId], references: [value])
  checklistItems ChecklistItem[]
  category       Category?       @relation(fields: [categoryId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  // @@unique([id, userId], name: "unique_task")
}

model TaskImpact {
  value      TASK_IMPACT @id
  basePoints Int         @default(1)
  tasks      Task[]
}

model Category {
  id    String @id @default(uuid())
  name  String
  tasks Task[]
}

model ChecklistItem {
  id        String  @id @default(uuid())
  title     String
  completed Boolean @default(false)
  order     Int
  taskId    String
  task      Task    @relation(fields: [taskId], references: [id])
}

//Check for completed tasks daily (or desired interval).
// If a task is completed, increment the currentStreak in the user's corresponding Streak record (create a new record if one doesn't exist).
// If a task isn't completed, reset the currentStreak to 0.
// Update the longestStreak if the currentStreak surpasses it.
model Streak {
  id            String   @id @default(uuid())
  startDate     DateTime @default(now())
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
}

// Evaluate user actions against badge criteria.
// If criteria are met, create a record in the UserBadge table linking the user to the earned badge.
model Badge {
  id          String      @id @default(uuid())
  name        String
  description String
  criteria    Json
  icon        String
  userBadges  UserBadge[]
}

model UserBadge {
  id       String   @id @default(uuid())
  earnedAt DateTime @default(now())
  userId   String
  badgeId  String
  user     User     @relation(fields: [userId], references: [id])
  badge    Badge    @relation(fields: [badgeId], references: [id])
}

enum CHALLENGE_TYPE {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

model Challenge {
  id             String          @id @default(uuid())
  title          String
  description    String
  type           CHALLENGE_TYPE
  startDate      DateTime        @default(now())
  endDate        DateTime
  criteria       Json
  userChallenges UserChallenge[]
}

model UserChallenge {
  id          String    @id @default(uuid())
  completed   Boolean   @default(false)
  progress    Int       @default(0)
  startDate   DateTime  @default(now())
  endDate     DateTime
  challengeId String
  userId      String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}
